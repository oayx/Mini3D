#version 100
precision mediump float;
precision highp int;

struct Light
{
    highp vec3 Dir;
    int Type;
    highp vec3 Color;
    highp vec3 Attenuation;
    highp float Range;
    highp vec3 Position;
    highp float SpotAngle;
};

struct type_CameraBuffer
{
    highp mat4 MATRIX_V;
    highp mat4 MATRIX_P;
    highp mat4 MATRIX_VP;
    highp mat4 MATRIX_I_VP;
    highp vec3 _WorldSpaceCameraPos;
    highp vec3 _WorldSpaceCameraDir;
    highp vec4 _ProjectionParams;
    highp vec4 _ScreenParams;
    highp vec4 _ZBufferParams;
};

uniform type_CameraBuffer CameraBuffer;

struct type_LightBuffer
{
    int _LightCount;
    highp vec3 _LightDir0;
    highp vec3 _LightColor0;
    Light _Light[8];
};

uniform type_LightBuffer LightBuffer;

struct type_CommbonRarelyBuffer
{
    highp vec3 _LIGHTMODEL_AMBIENT;
    int _FogMode;
    highp vec4 _FogColor;
    highp float _FogStart;
    highp float _FogEnd;
    highp float _FogDensity;
};

uniform type_CommbonRarelyBuffer CommbonRarelyBuffer;

struct type_CustomBuffer
{
    highp vec4 _MainTex_ST;
    highp float _SpecularPower;
    highp float _Reflections;
};

uniform type_CustomBuffer CustomBuffer;

uniform highp sampler2D _MainTex;
uniform highp sampler2D _NormalTexture;
uniform highp samplerCube _SkyBox;

varying highp vec2 varying_TEXCOORD0;
varying highp mat3 varying_TEXCOORD1;
varying highp vec3 varying_TEXCOORD4;
varying highp vec3 in_var_TEXCOORD5;
varying highp vec3 varying_TEXCOORD6;
varying highp float varying_TEXCOORD7;

void main()
{
    highp vec4 _89 = texture2D(_MainTex, varying_TEXCOORD0);
    highp vec4 _93 = texture2D(_NormalTexture, varying_TEXCOORD0);
    highp vec3 _98 = normalize(varying_TEXCOORD1 * ((_93.xyz * 2.0) - vec3(1.0)));
    highp vec3 _102;
    _102 = vec3(0.0);
    highp vec3 _103;
    for (int _105 = 0; _105 < LightBuffer._LightCount; _102 = _103, _105++)
    {
        highp float _171;
        highp vec3 _172;
        if (LightBuffer._Light[_105].Type == 0)
        {
            _171 = 1.0;
            _172 = -LightBuffer._LightDir0;
        }
        else
        {
            highp float _169;
            highp vec3 _170;
            if (LightBuffer._Light[_105].Type == 1)
            {
                highp vec3 _132 = LightBuffer._Light[_105].Position - varying_TEXCOORD4;
                highp float _133 = length(_132);
                if (_133 > LightBuffer._Light[_105].Range)
                {
                    _103 = _102;
                    continue;
                }
                _169 = 1.0 / dot(LightBuffer._Light[_105].Attenuation, vec3(1.0, _133, _133 * _133));
                _170 = _132;
            }
            else
            {
                highp float _167;
                highp vec3 _168;
                if (LightBuffer._Light[_105].Type == 2)
                {
                    highp vec3 _144 = LightBuffer._Light[_105].Position - varying_TEXCOORD4;
                    if (dot(_144, _98) <= 0.0)
                    {
                        _103 = _102;
                        continue;
                    }
                    highp float _149 = length(_144);
                    if (_149 > LightBuffer._Light[_105].Range)
                    {
                        _103 = _102;
                        continue;
                    }
                    highp float _158 = max(0.0, dot(-normalize(_144), LightBuffer._Light[_105].Dir));
                    if (_158 <= cos(LightBuffer._Light[_105].SpotAngle * 0.01745329983532428741455078125))
                    {
                        _103 = _102;
                        continue;
                    }
                    _167 = pow(_158, 2.0) / dot(LightBuffer._Light[_105].Attenuation, vec3(1.0, _149, _149 * _149));
                    _168 = _144;
                }
                else
                {
                    _167 = 1.0;
                    _168 = vec3(0.0);
                }
                _169 = _167;
                _170 = _168;
            }
            _171 = _169;
            _172 = _170;
        }
        _103 = _102 + ((LightBuffer._Light[_105].Color * vec3(max(0.0, dot(_98, normalize(_172))))) * _171);
    }
    highp vec3 _182 = (CommbonRarelyBuffer._LIGHTMODEL_AMBIENT + _102) * _89.xyz;
    highp vec3 _201;
    if (CustomBuffer._Reflections > 0.0)
    {
        _201 = mix(_182, textureCube(_SkyBox, normalize(reflect(normalize(varying_TEXCOORD4 - CameraBuffer._WorldSpaceCameraPos), varying_TEXCOORD6))).xyz, vec3(CustomBuffer._Reflections));
    }
    else
    {
        _201 = _182;
    }
    highp float _202 = _89.w;
    highp float _242;
    if (CommbonRarelyBuffer._FogMode == 1)
    {
        _242 = clamp((CommbonRarelyBuffer._FogEnd - varying_TEXCOORD7) / (CommbonRarelyBuffer._FogEnd - CommbonRarelyBuffer._FogStart), 0.0, 1.0);
    }
    else
    {
        highp float _241;
        if (CommbonRarelyBuffer._FogMode == 2)
        {
            _241 = exp(-(CommbonRarelyBuffer._FogDensity * varying_TEXCOORD7));
        }
        else
        {
            highp float _240;
            if (CommbonRarelyBuffer._FogMode == 3)
            {
                _240 = exp((((-CommbonRarelyBuffer._FogDensity) * CommbonRarelyBuffer._FogDensity) * varying_TEXCOORD7) * varying_TEXCOORD7);
            }
            else
            {
                _240 = 1.0;
            }
            _241 = _240;
        }
        _242 = _241;
    }
    gl_FragData[0] = vec4(max((pow(max(mix(CommbonRarelyBuffer._FogColor.xyz, vec4(_201, _202).xyz, vec3(_242)).xyz, vec3(0.0)), vec3(0.4166666567325592041015625)) * 1.05499994754791259765625) - vec3(0.054999999701976776123046875), vec3(0.0)), _202);
}

